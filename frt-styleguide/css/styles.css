html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  border: 0;
  box-sizing: border-box;
  font-family: inherit;
  font-size: 100%;
  margin: 0;
  outline: 0 none;
  padding: 0;
  vertical-align: baseline; }

audio,
canvas,
video {
  display: inline-block; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

caption,
th,
td {
  font-weight: normal;
  text-align: left;
  vertical-align: middle; }

q,
blockquote {
  quotes: none; }

q:before,
q:after,
blockquote:before,
blockquote:after {
  content: none; }

a img {
  border: 0; }

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section,
summary,
main {
  display: block; }

img {
  font-size: 0;
  height: auto; }

img,
object,
embed {
  max-width: 100%; }

@font-face {
  font-family: "icomoon";
  src: url("../fonts/icomoon.eot?") format("eot"), url("../fonts/icomoon.woff2") format("woff2"), url("../fonts/icomoon.woff") format("woff"), url("../fonts/icomoon.ttf") format("truetype"), url('../fonts/icomoon.svg#str-replace("icomoon", " ", "_")') format("svg"); }

[class^='icon-'],
[class*=' icon-'],
.icon {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-style: normal;
  font-variant: normal;
  font-weight: normal;
  line-height: 1;
  speak: none;
  text-transform: none;
  color: #000;
  box-sizing: border-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -ms-grid-column-align: center;
      justify-items: center;
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center; }
  [class^='icon-']:after,
  [class*=' icon-']:after, [class^='icon-']:before,
  [class*=' icon-']:before,
  .icon:after,
  .icon:before {
    content: "\e902";
    font-family: "icomoon";
    font-size: inherit;
    font-weight: normal;
    line-height: 1; }
  
  .icon--bg:before,
  .icon--bg:after {
    background: #000;
    display: inline-block;
    color: #fff;
    opacity: .5;
    transition: opacity .3s linear; }
  
  .icon--bg:hover:before,
  .icon--bg:hover:after {
    opacity: 1; }

.container {
  max-width: 100%;
  margin-left: 1.42857rem;
  margin-right: 1.42857rem; }
  .container:after {
    content: " ";
    display: block;
    clear: both; }
  @media (min-width: 54.85714em) {
    .container {
      max-width: 100%;
      margin-left: 2.85714rem;
      margin-right: 2.85714rem; }
      .container:after {
        content: " ";
        display: block;
        clear: both; } }
  @media (min-width: 73.14286em) {
    .container {
      max-width: 68.57143rem;
      margin-left: auto;
      margin-right: auto; }
      .container:after {
        content: " ";
        display: block;
        clear: both; } }
  @media (min-width: 91.42857em) {
    .container {
      max-width: 84.28571rem;
      margin-left: auto;
      margin-right: auto; }
      .container:after {
        content: " ";
        display: block;
        clear: both; } }
  @media (min-width: 102.85714em) {
    .container {
      max-width: 91.42857rem;
      margin-left: auto;
      margin-right: auto; }
      .container:after {
        content: " ";
        display: block;
        clear: both; } }

h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: normal;
  text-transform: uppercase; }

h1 {
  font-size: 50px; }

h2 {
  font-size: 18px; }
  @media only screen and (min-width: 480px) {
    h2 {
      font-size: 30px; } }
  @media only screen and (min-width: 768px) {
    h2 {
      font-size: 40px; } }

h3 {
  font-size: 25px;
  font-weight: bold; }
  @media only screen and (min-width: 768px) {
    h3 {
      font-size: 30px; } }

h4 {
  font-size: 20px; }
  @media only screen and (min-width: 768px) {
    h4 {
      font-size: 25px; } }

h5 {
  font-size: 15px; }
  @media only screen and (min-width: 768px) {
    h5 {
      font-size: 20px; } }

h5 {
  font-size: 16px; }

h6 {
  font-size: 14px; }

a,
.link {
  color: #000;
  text-decoration: none;
  transition: all .3s ease;
  cursor: pointer; }
  a:active, a:hover,
  .link:active,
  .link:hover {
    color: black; }
  .text--white a,
  .link--white {
    color: #fff; }
    .text--white a:active, .text--white a:hover,
    .link--white:active,
    .link--white:hover {
      color: #d9d9d9; }

p {
  margin-bottom: 2.14286rem; }

em {
  font-style: italic; }

b,
strong {
  font-weight: 700; }

sub {
  vertical-align: sub;
  font-size: smaller; }

sup {
  vertical-align: super; }

small {
  font-size: smaller; }

abbr {
  border-bottom: 1px dotted #000;
  cursor: help; }

tt,
code,
kbd,
samp {
  font-family: monospace; }

ol,
ul {
  padding: 0;
  margin: 0;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex; }

li {
  list-style: none; }

label {
  font-weight: 700; }

blockquote p {
  display: inline; }

blockquote:before {
  content: '\201c'; }

blockquote:after {
  content: '\201d'; }

iframe {
  max-width: 100%; }

figure {
  line-height: 0; }


.btn,
button,
input[type='submit'] {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  background-image: none;
  border-radius: 0;
  border: none;
  box-shadow: none;
  display: inline-block;
  text-transform: uppercase;
  line-height: 1;
  outline: none;
  padding: 8px 10px;
  text-align: center;
  text-shadow: none;
  transition: all .3s ease;
  background-color: #fff;
  color: #000;
  cursor: pointer;
  min-width: 170px;
  box-sizing: border-box; }
  
  .btn--border {
    border: 1px solid #000 !important; }
  
  .btn--longer {
    padding: 10px 30px !important; }
  @media only screen and (min-width: 768px) {
    
    .btn:active,
    button:active,
    input[type='submit']:active,
    .btn:hover,
    button:hover,
    input[type='submit']:hover {
      background-color: #000;
      color: #fff; } }
  @media only screen and (min-width: 480px) {
    
    .btn,
    button,
    input[type='submit'] {
      padding: 10px 15px; } }

form {
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
      -ms-flex-direction: column;
          flex-direction: column; }
  form__item {
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-flex-direction: column;
        -ms-flex-direction: column;
            flex-direction: column; }
    form__item label {
      width: 100%;
      padding: 10px 0;
      text-transform: capitalize;
      display: block;
      margin-bottom: 20px;
      font-weight: normal; }

input[type="text"], textarea {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  background-color: #fff;
  border-radius: 0;
  border: none;
  outline: none;
  box-shadow: none;
  color: #000;
  font-size: 16px;
  font-weight: 400;
  padding: 0 0 10px 0;
  transition: all .3s ease-in-out;
  width: 100%;
  border-bottom: 1px solid rgba(0, 0, 0, 0.5);
  margin-bottom: 10px; }
  input[type="text"]:focus, textarea:focus {
    box-shadow: none; }
  input[type="text"]::-webkit-input-placeholder, textarea::-webkit-input-placeholder {
    color: rgba(0, 0, 0, 0.5);
    text-transform: capitalize; }
  input[type="text"]:-ms-input-placeholder, textarea:-ms-input-placeholder {
    color: rgba(0, 0, 0, 0.5);
    text-transform: capitalize; }
  input[type="text"]::placeholder, textarea::placeholder {
    color: rgba(0, 0, 0, 0.5);
    text-transform: capitalize; }
  input[type="text"]:disabled, textarea:disabled {
    background: rgba(0, 0, 0, 0.5); }

input[type="text"].error {
  background: rgba(255, 0, 0, 0.8); }

textarea {
  min-height: 100px; }

select {
  border: 1px solid #000;
  outline: none;
  box-shadow: none;
  padding: 5px;
  font-size: 16px;
  text-align-last: center;
  color: #000;
  background: #fff; }

table {
  margin-bottom: 1.07143rem;
  width: 100%; }
  @media (min-width: 73.14286em) {
    table {
      min-width: 100%; } }

td,
th {
  border-bottom: 0.07143rem solid #000;
  min-width: 8.57143rem;
  padding: 0.71429rem 1.28571rem;
  vertical-align: top; }
  tbody tr:first-of-type td, tbody tr:first-of-type
  th {
    border-top: 0.07143rem solid #000; }

th {
  font-weight: 700; }

.table-responsive {
  margin-bottom: 1.07143rem;
  overflow-x: auto;
  width: 100%; }
  .table-responsive table {
    margin-bottom: 0; }

.text--center {
  text-align: center; }

.text--left {
  text-align: left; }

.text--right {
  text-align: right; }

.text--dark {
  color: #000; }

.text--white {
  color: #fff; }

.bg--primary {
  background-color: #000; }

.bg--white {
  background-color: #fff; }

@-o-viewport {
  zoom: 1;
  width: extend-to-zoom; }

@viewport {
  zoom: 1;
  width: extend-to-zoom; }

@-ms-viewport {
  width: extend-to-zoom;
  zoom: 1; }

html {
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  color: #000;
  font-size: 14px;
  font-smoothing: antialiased;
  font-weight: 400;
  line-height: 1.5; }

body {
  -webkit-text-size-adjust: none;
      -ms-text-size-adjust: none;
          text-size-adjust: none; }

.nav ul {
  margin-bottom: 0.71429rem; }

.box-image-text {
  margin: 0 auto; }
  .box-image-text__wrap {
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-justify-content: space-between;
        -ms-flex-pack: justify;
            justify-content: space-between; }
  .box-image-text__content {
    width: 40%; }
    .box-image-text__content a {
      border: solid 1px;
      background: #333132;
      color: #fff;
      padding: 10px 50px; }
  .box-image-text__image {
    width: 60%;
    margin-right: -65px; }
    .box-image-text__image__wrap {
      position: relative;
      margin-top: 25px; }
      .box-image-text__image__wrap .sub-image {
        position: absolute;
        top: 330px;
        left: -100px;
        background: #fff;
        box-sizing: border-box;
        width: 50%; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
